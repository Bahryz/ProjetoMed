Entendido! Você quer que eu corrija os erros existentes, crie os arquivos de tela que estão faltando e complemente o código para ter uma funcionalidade de autenticação mais robusta e organizada.

Vamos fazer isso passo a passo, arquivo por arquivo.

1. lib/core/utils/exceptions.dart (Exceções Personalizadas)
Primeiro, vamos garantir que temos nossas exceções personalizadas para um tratamento de erro mais claro. Se você já criou este arquivo, verifique se ele está assim:

Dart

// lib/core/utils/exceptions.dart

// Exceção base para erros de autenticação
class AuthException implements Exception {
  final String message;
  AuthException(this.message);

  @override
  String toString() => message; // Para exibir a mensagem diretamente
}

// Exceções específicas
class EmailAlreadyInUseAuthException extends AuthException {
  EmailAlreadyInUseAuthException() : super('Este e-mail já está em uso.');
}

class WeakPasswordAuthException extends AuthException {
  WeakPasswordAuthException() : super('A senha fornecida é muito fraca.');
}

class WrongPasswordAuthException extends AuthException {
  WrongPasswordAuthException() : super('A senha ou e-mail estão incorretos.');
}

class UserNotFoundAuthException extends AuthException {
  UserNotFoundAuthException() : super('Nenhum usuário encontrado com este e-mail.');
}

// Adicione outras se necessário, como InvalidEmailAuthException, etc.
2. lib/features/authentication/data/repositories/auth_repository.dart (Corrigido e Melhorado)
Integraremos as exceções personalizadas aqui.

Dart

// lib/features/authentication/data/repositories/auth_repository.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:medico_app/features/authentication/data/models/app_user.dart';
import 'package:medico_app/core/utils/exceptions.dart'; // Importe suas exceções

class AuthRepository {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  User? get currentUser => _auth.currentUser;
  Stream<User?> get authStateChanges => _auth.authStateChanges();

  Future<void> registerUser(AppUser userData, String password) async {
    try {
      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(
        email: userData.email,
        password: password,
      );

      if (userCredential.user != null) {
        // Criando um novo AppUser com o UID retornado pelo Firebase Auth
        // Isso garante que o UID no modelo é o mesmo do Auth.
        AppUser userToSave = AppUser(
          uid: userCredential.user!.uid, // UID do Firebase Auth
          email: userData.email,
          nome: userData.nome,
          userType: userData.userType,
          crm: userData.crm,
          cpf: userData.cpf,
        );
        await _firestore
            .collection('users')
            .doc(userToSave.uid) // Usando o UID do Firebase Auth
            .set(userToSave.toMap());
      }
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        throw WeakPasswordAuthException();
      } else if (e.code == 'email-already-in-use') {
        throw EmailAlreadyInUseAuthException();
      }
      throw AuthException('Erro ao registrar: ${e.message}');
    } catch (e) {
      throw AuthException('Ocorreu um erro inesperado durante o registro.');
    }
  }

  Future<void> signIn(String email, String password) async {
    try {
      await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found' || e.code == 'wrong-password' || e.code == 'invalid-credential') {
        // Para 'invalid-credential', podemos usar a mesma mensagem de senha/email incorretos
        throw WrongPasswordAuthException();
      }
      throw AuthException('Erro ao fazer login: ${e.message}');
    } catch (e) {
      throw AuthException('Ocorreu um erro inesperado durante o login.');
    }
  }

  Future<void> signOut() async {
    try {
      await _auth.signOut();
    } catch (e) {
      throw AuthException('Erro ao fazer logout.');
    }
  }
}
3. lib/features/authentication/presentation/controllers/auth_controller.dart (Corrigido e Complementado)
Vamos corrigir a chamada ao signIn e adicionar os handlers de registro. Este controller agora também gerenciará o estado de autenticação para o refreshListenable do GoRouter.

Dart

// lib/features/authentication/presentation/controllers/auth_controller.dart
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:medico_app/features/authentication/data/models/app_user.dart';
import 'package:medico_app/features/authentication/data/repositories/auth_repository.dart';
import 'package:medico_app/core/utils/exceptions.dart'; // Importe suas exceções

enum AuthStatus { unknown, authenticated, unauthenticated }

class AuthController with ChangeNotifier {
  final AuthRepository _repository;
  late StreamSubscription<User?> _authStateSubscription;

  AuthController(this._repository) {
    // Ouça as mudanças no estado de autenticação do repositório
    _authStateSubscription = _repository.authStateChanges.listen(_onAuthStateChanged);
    // Verifique o estado inicial
    _onAuthStateChanged(_repository.currentUser);
  }

  AuthStatus _status = AuthStatus.unknown;
  bool _isLoading = false;
  String? _errorMessage;

  AuthStatus get status => _status;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  void _onAuthStateChanged(User? user) {
    if (user == null) {
      _status = AuthStatus.unauthenticated;
    } else {
      _status = AuthStatus.authenticated;
    }
    notifyListeners(); // Notifica GoRouter e outros ouvintes
  }

  Future<bool> _handleAuthRequest(Future<void> Function() request) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();
    try {
      await request();
      // O status será atualizado pelo _onAuthStateChanged
      return true;
    } on AuthException catch (e) { // Captura nossas exceções personalizadas
      _errorMessage = e.message;
      return false;
    } catch (e) { // Captura qualquer outra exceção genérica
      _errorMessage = 'Ocorreu um erro inesperado: ${e.toString()}';
      return false;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<bool> handleSignIn(String email, String password) async {
    // CORRIGIDO: signIn espera argumentos posicionais
    return _handleAuthRequest(() => _repository.signIn(email, password));
  }

  Future<bool> handleRegister(AppUser userData, String password) async {
    return _handleAuthRequest(() => _repository.registerUser(userData, password));
  }
  
  Future<void> handleSignOut() async {
    await _repository.signOut();
    // O status será atualizado pelo _onAuthStateChanged
  }

  @override
  void dispose() {
    _authStateSubscription.cancel(); // Cancela a inscrição ao stream
    super.dispose();
  }
}
4. Telas de Registro (Novos Arquivos)
a. lib/features/authentication/presentation/screens/register_medico_screen.dart:

Dart

// lib/features/authentication/presentation/screens/register_medico_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:medico_app/features/authentication/data/models/app_user.dart';
import '../controllers/auth_controller.dart';

class RegisterMedicoScreen extends StatefulWidget {
  const RegisterMedicoScreen({super.key});

  @override
  State<RegisterMedicoScreen> createState() => _RegisterMedicoScreenState();
}

class _RegisterMedicoScreenState extends State<RegisterMedicoScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nomeController = TextEditingController();
  final _emailController = TextEditingController();
  final _crmController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();

  @override
  void dispose() {
    _nomeController.dispose();
    _emailController.dispose();
    _crmController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  Future<void> _submit() async {
    if (_formKey.currentState!.validate()) {
      final authController = context.read<AuthController>();
      final appUser = AppUser(
        uid: '', // Será preenchido pelo repositório
        nome: _nomeController.text.trim(),
        email: _emailController.text.trim(),
        crm: _crmController.text.trim(),
        userType: 'medico', 
        cpf: null, // Pacientes não preenchem CRM
      );

      final success = await authController.handleRegister(
        appUser,
        _passwordController.text,
      );

      if (success && mounted) {
        // O GoRouter cuidará do redirecionamento baseado no AuthStatus
      } else if (!mounted) {
        return;
      }
      // Se houver erro, a mensagem já está no authController.errorMessage
      // e será exibida pelo Consumer/Watch.
    }
  }

  @override
  Widget build(BuildContext context) {
    final authController = context.watch<AuthController>();

    return Scaffold(
      appBar: AppBar(title: const Text('Cadastro de Médico')),
      body: Center(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24.0),
          child: Form(
            key: _formKey,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                TextFormField(
                  controller: _nomeController,
                  decoration: const InputDecoration(labelText: 'Nome Completo'),
                  validator: (value) => (value?.isEmpty ?? true) ? 'Campo obrigatório' : null,
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _emailController,
                  decoration: const InputDecoration(labelText: 'Email'),
                  keyboardType: TextInputType.emailAddress,
                  validator: (value) {
                    if (value?.isEmpty ?? true) return 'Campo obrigatório';
                    if (!value!.contains('@')) return 'Email inválido';
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _crmController,
                  decoration: const InputDecoration(labelText: 'CRM'),
                  validator: (value) => (value?.isEmpty ?? true) ? 'Campo obrigatório' : null,
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _passwordController,
                  decoration: const InputDecoration(labelText: 'Senha'),
                  obscureText: true,
                  validator: (value) {
                    if (value?.isEmpty ?? true) return 'Campo obrigatório';
                    if (value!.length < 6) return 'Senha muito curta (mínimo 6 caracteres)';
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _confirmPasswordController,
                  decoration: const InputDecoration(labelText: 'Confirmar Senha'),
                  obscureText: true,
                  validator: (value) {
                    if (value?.isEmpty ?? true) return 'Campo obrigatório';
                    if (value != _passwordController.text) return 'As senhas não coincidem';
                    return null;
                  },
                ),
                const SizedBox(height: 24),
                authController.isLoading
                    ? const Center(child: CircularProgressIndicator())
                    : ElevatedButton(
                        onPressed: _submit,
                        child: const Text('Cadastrar'),
                      ),
                if (authController.errorMessage != null) ...[
                  const SizedBox(height: 8),
                  Text(
                    authController.errorMessage!,
                    style: const TextStyle(color: Colors.red),
                    textAlign: TextAlign.center,
                  ),
                ],
                const SizedBox(height: 24),
                TextButton(
                  onPressed: () => context.go('/login'),
                  child: const Text('Já tem conta? Entrar'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
b. lib/features/authentication/presentation/screens/register_paciente_screen.dart:

Dart

// lib/features/authentication/presentation/screens/register_paciente_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:medico_app/features/authentication/data/models/app_user.dart';
import '../controllers/auth_controller.dart';

class RegisterPacienteScreen extends StatefulWidget {
  const RegisterPacienteScreen({super.key});

  @override
  State<RegisterPacienteScreen> createState() => _RegisterPacienteScreenState();
}

class _RegisterPacienteScreenState extends State<RegisterPacienteScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nomeController = TextEditingController();
  final _emailController = TextEditingController();
  final _cpfController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();

  @override
  void dispose() {
    _nomeController.dispose();
    _emailController.dispose();
    _cpfController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  Future<void> _submit() async {
    if (_formKey.currentState!.validate()) {
      final authController = context.read<AuthController>();
      final appUser = AppUser(
        uid: '', // Será preenchido pelo repositório
        nome: _nomeController.text.trim(),
        email: _emailController.text.trim(),
        cpf: _cpfController.text.trim(),
        userType: 'paciente',
        crm: null, // Médicos não preenchem CPF
      );

      final success = await authController.handleRegister(
        appUser,
        _passwordController.text,
      );
      
      if (success && mounted) {
        // O GoRouter cuidará do redirecionamento baseado no AuthStatus
      } else if (!mounted) {
        return;
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final authController = context.watch<AuthController>();

    return Scaffold(
      appBar: AppBar(title: const Text('Cadastro de Paciente')),
      body: Center(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24.0),
          child: Form(
            key: _formKey,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                TextFormField(
                  controller: _nomeController,
                  decoration: const InputDecoration(labelText: 'Nome Completo'),
                  validator: (value) => (value?.isEmpty ?? true) ? 'Campo obrigatório' : null,
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _emailController,
                  decoration: const InputDecoration(labelText: 'Email'),
                  keyboardType: TextInputType.emailAddress,
                  validator: (value) {
                    if (value?.isEmpty ?? true) return 'Campo obrigatório';
                    if (!value!.contains('@')) return 'Email inválido';
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _cpfController,
                  decoration: const InputDecoration(labelText: 'CPF'),
                  keyboardType: TextInputType.number,
                  validator: (value) { // Adicione uma validação de CPF mais robusta se necessário
                    if (value?.isEmpty ?? true) return 'Campo obrigatório';
                    if (value!.replaceAll(RegExp(r'[^0-9]'), '').length != 11) return 'CPF inválido';
                    return null;
                  }
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _passwordController,
                  decoration: const InputDecoration(labelText: 'Senha'),
                  obscureText: true,
                  validator: (value) {
                    if (value?.isEmpty ?? true) return 'Campo obrigatório';
                    if (value!.length < 6) return 'Senha muito curta (mínimo 6 caracteres)';
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _confirmPasswordController,
                  decoration: const InputDecoration(labelText: 'Confirmar Senha'),
                  obscureText: true,
                  validator: (value) {
                    if (value?.isEmpty ?? true) return 'Campo obrigatório';
                    if (value != _passwordController.text) return 'As senhas não coincidem';
                    return null;
                  },
                ),
                const SizedBox(height: 24),
                authController.isLoading
                    ? const Center(child: CircularProgressIndicator())
                    : ElevatedButton(
                        onPressed: _submit,
                        child: const Text('Cadastrar'),
                      ),
                if (authController.errorMessage != null) ...[
                  const SizedBox(height: 8),
                  Text(
                    authController.errorMessage!,
                    style: const TextStyle(color: Colors.red),
                    textAlign: TextAlign.center,
                  ),
                ],
                const SizedBox(height: 24),
                TextButton(
                  onPressed: () => context.go('/login'),
                  child: const Text('Já tem conta? Entrar'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
5. lib/app/config/router/app_router.dart (Corrigido e Atualizado)
Com as telas de registro criadas, agora podemos corrigir os imports e a lógica de redirect e refreshListenable para usar o AuthController.

Dart

// lib/app/config/router/app_router.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

// IMPORTS DAS SUAS TELAS E CONTROLLER
import '../../../features/authentication/presentation/controllers/auth_controller.dart';
import '../../../features/authentication/presentation/screens/login_screen.dart';
import '../../../features/authentication/presentation/screens/register_medico_screen.dart';
import '../../../features/authentication/presentation/screens/register_paciente_screen.dart';

// Tela de Home simples (mova para seu próprio arquivo em features/home/presentation/screens)
class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Home'),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () => context.read<AuthController>().handleSignOut(),
          ),
        ],
      ),
      body: const Center(child: Text('Bem-vindo!')),
    );
  }
}

class AppRouter {
  final AuthController authController;

  AppRouter(this.authController);

  late final GoRouter router = GoRouter(
    initialLocation: '/login',
    // Agora o router ouve o AuthController para mudanças de estado
    refreshListenable: authController,
    routes: [
      GoRoute(
        path: '/login',
        builder: (context, state) => const LoginScreen(),
      ),
      GoRoute(
        path: '/register-medico',
        builder: (context, state) => const RegisterMedicoScreen(),
      ),
      GoRoute(
        path: '/register-paciente',
        builder: (context, state) => const RegisterPacienteScreen(),
      ),
      GoRoute(
        path: '/home',
        builder: (context, state) => const HomeScreen(),
      ),
    ],
    redirect: (context, state) {
      final authStatus = authController.status;
      final bool loggedIn = authStatus == AuthStatus.authenticated;
      
      final String location = state.uri.toString();

      final boolisOnAuthRoutes = location.startsWith('/login') ||
          location.startsWith('/register-medico') ||
          location.startsWith('/register-paciente');

      // Se não estiver logado e tentando acessar rota protegida
      if (!loggedIn && !isOnAuthRoutes) {
        return '/login';
      }

      // Se estiver logado e tentando acessar rota de autenticação
      if (loggedIn && isOnAuthRoutes) {
        return '/home';
      }
      return null; // Nenhuma ação de redirecionamento necessária
    },
  );
}
Nota: A classe GoRouterRefreshStream não é mais necessária aqui, pois o AuthController agora é um ChangeNotifier e o GoRouter pode ouvi-lo diretamente.

6. lib/main.dart (Configuração Final dos Providers)
Atualize o main.dart para fornecer o AuthRepository, depois o AuthController e, por fim, o GoRouter.

Dart

// lib/main.dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import 'package:medico_app/app/config/router/app_router.dart';
import 'package:medico_app/features/authentication/data/repositories/auth_repository.dart';
import 'package:medico_app/features/authentication/presentation/controllers/auth_controller.dart';
import 'firebase_options.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        // Fornece o AuthRepository
        Provider<AuthRepository>(
          create: (_) => AuthRepository(),
        ),
        // AuthController depende do AuthRepository
        ChangeNotifierProvider<AuthController>(
          create: (context) => AuthController(context.read<AuthRepository>()),
        ),
        // GoRouter depende do AuthController
        ProxyProvider<AuthController, GoRouter>(
          update: (context, authController, previous) => AppRouter(authController).router,
        ),
      ],
      child: Builder(
        builder: (context) {
          // Obtém o GoRouter fornecido para configurar o MaterialApp.router
          final router = Provider.of<GoRouter>(context);
          return MaterialApp.router(
            title: 'Seu App Médico',
            debugShowCheckedModeBanner: false,
            routerConfig: router,
          );
        },
      ),
    );
  }
}
7. Firestore Rules (Lembrete de Segurança 🔐)
Não se esqueça de proteger seu banco de dados no Firebase Console!
Firebase Console > Firestore Database > Rules:

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      // Usuário só pode ler e atualizar seus próprios dados.
      allow read, update: if request.auth != null && request.auth.uid == userId;
      
      // Usuário só pode criar seu próprio documento se o ID do doc for seu UID.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Ninguém pode deletar um usuário (regra segura).
      allow delete: if false;
    }
    // Adicione regras para outras coleções conforme necessário
  }
}
Clique em Publicar.

Próximos Passos:
Crie os arquivos para RegisterMedicoScreen e RegisterPacienteScreen nos caminhos corretos e cole os códigos fornecidos.
Verifique os imports em todos os arquivos, especialmente os caminhos relativos para seus modelos, controllers e telas.
Reinicie completamente sua aplicação (Full Restart / Cold Restart) para que todas as mudanças e providers sejam corretamente inicializados.
Teste os fluxos de registro e login.
Com essas correções e complementos, seu sistema de autenticação estará muito mais completo, robusto e organizado!